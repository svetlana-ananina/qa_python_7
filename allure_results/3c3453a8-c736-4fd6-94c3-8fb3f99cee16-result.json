{"name": "Проверяем, что можно создать заказ с указанием любого цвета", "status": "failed", "statusDetails": {"message": "AssertionError: Неверный код в ответе: ожидался 201, получен \"500\", ответ: \"{\"code\":500,\"message\":\"values.map is not a function\"}\"", "trace": "self = <test_create_order.TestCreateOrder object at 0x000001B7F6D62D10>, color = ['BLACK']\n\n    @pytest.mark.parametrize('color', [\n        [order_field.COLOR_BLACK],\n        [order_field.COLOR_GREY],\n        [order_field.COLOR_BLACK, order_field.COLOR_GREY],\n        []                  ])\n    @allure.title('Проверяем, что можно создать заказ с указанием любого цвета')\n    def test_create_order_with_color(self, color):\n        if _debug:\n            print('\\n============================= Проверяем, что можно создать заказ с указанием любого цвета =============================')\n        # генерируем данные заказа\n        order_data = generate_order_data()\n        order_data[order_field.COLOR] = color\n        # создаем новый заказ\n        response = create_order(order_data)\n        # проверяем что получен код ответа 201\n>       check_status_code(response, code.CREATED)\n\ntests\\test_create_order.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [500]>, expected_code = 201\n\n    @allure.step('Проверяем код ответа')\n    def check_status_code(response, expected_code):\n        # проверяем что получен код ответа expected_code\n        received_code = response.status_code\n>       assert received_code == expected_code, f'Неверный код в ответе: ожидался {expected_code}, получен \"{received_code}\", ответ: \"{response.text}\"'\nE       AssertionError: Неверный код в ответе: ожидался 201, получен \"500\", ответ: \"{\"code\":500,\"message\":\"values.map is not a function\"}\"\n\nhelpers\\helpers_on_check_response.py:17: AssertionError"}, "steps": [{"name": "Генерируем данные для заказа", "status": "passed", "start": 1701540623298, "stop": 1701540623298}, {"name": "Отправляем API-запрос на создание заказа", "status": "passed", "parameters": [{"name": "payload", "value": "{'firstName': 'Иван', 'lastName': 'Иванов', 'address': 'Русаковская улица, 22', 'metroStation': 4, 'phone': '+79999999999', 'rentTime': 1, 'deliveryDate': '01.01.2024', 'comment': 'Позвоните за полчаса', 'color': ['BLACK']}"}], "start": 1701540623298, "stop": 1701540623384}, {"name": "Проверяем код ответа", "status": "failed", "statusDetails": {"message": "AssertionError: Неверный код в ответе: ожидался 201, получен \"500\", ответ: \"{\"code\":500,\"message\":\"values.map is not a function\"}\"\n", "trace": "  File \"C:\\Python_projects\\Python_QA\\qa_python_1\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Python_projects\\Python_QA\\qa_python_7\\helpers\\helpers_on_check_response.py\", line 17, in check_status_code\n    assert received_code == expected_code, f'Неверный код в ответе: ожидался {expected_code}, получен \"{received_code}\", ответ: \"{response.text}\"'\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"}, "parameters": [{"name": "response", "value": "<Response [500]>"}, {"name": "expected_code", "value": "201"}], "start": 1701540623384, "stop": 1701540623384}], "attachments": [{"name": "stdout", "source": "62b3cecd-5347-4c44-966d-fdc965737b12-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "color", "value": "['BLACK']"}], "start": 1701540623296, "stop": 1701540623386, "uuid": "a8b2b728-bc3e-4afc-a645-40221cf8a494", "historyId": "89206a11e981b435369a7f623cda51f9", "testCaseId": "542d019bdcd05dd2499e933b8aae6960", "fullName": "tests.test_create_order.TestCreateOrder#test_create_order_with_color", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_create_order"}, {"name": "subSuite", "value": "TestCreateOrder"}, {"name": "host", "value": "DESKTOP-O6MNHQN"}, {"name": "thread", "value": "3976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_create_order"}]}